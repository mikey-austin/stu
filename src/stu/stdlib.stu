;;
;; Copyright (c) 2016 - 2018 Mikey Austin <mikey@jackiemclean.net>
;;
;; Permission to use, copy, modify, and distribute this software for any
;; purpose with or without fee is hereby granted, provided that the above
;; copyright notice and this permission notice appear in all copies.
;;
;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
;; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
;; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
;; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
;; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
;; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
;; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
;;

(defmod stdlib
  "Stu standard library functions and definitions.

   Note that lambda or λ can be used for lambda syntax.")

(defmacro let (args & body)
  "make a new scope and bind the arguments to it"
  `((λ ,(map car args) ,@body)
    ,@(map cadr args)))

(defmacro when (cond & body)
  "an if statement with no else"
  `(if ,cond
       (progn ,@body)
     nil))

(defmacro unless (cond & body)
  "perl-style unless"
  `(when (not ,cond)
     (progn ,@body)))

(defun not (a)
  "Boolean negation"
  (if a #f #t))

(defun nil? (a)
  "nil predicate"
  (= a nil))

(defun foldr (f end lst)
  "Fold right"
  (if (nil? lst)
      end
    (f (car lst) (foldr f end (cdr lst)))))

(defun foldl (f acc lst)
  "Fold left"
  (if (nil? lst)
      acc
    (foldl f (f (car lst) acc) (cdr lst))))

(defun length (lst)
  "Length of a list"
  (foldl (λ (a b) (+ 1 b)) 0 lst))

(defun map (f lst)
  "Standard map"
  (foldr (λ (a b) (cons (f a) b)) nil lst))

(defun grep (p lst)
  "Perl-style grep which essentially filters list elements"
  (foldr (λ (a b)
             (if (p a) (cons a b) b)) nil lst))

(defun append (& lists)
  "Concatenate two lists"
  (foldl (foldr cons) () lists))

(defun max (a b)
  "Max of two comparable things"
  (if (> a b) a b))

(defun min (a b)
  "Min of two comparable things"
  (if (< a b) a b))

(defun list-max (lst)
  "Find the max of a list"
  (foldl max 0 lst))

(defun list-min (lst)
  "Find the min of a list"
  (foldl min (car lst) lst))

(defun abs (a)
  "Return the absolute value of the supplied number"
  (if (< a 0) (- a) a))

(defun cadr (a)
  "CAR of the CDR"
  (car (cdr a)))

(defun caddr (a)
  "CAR of the CDR ^ 2"
  (car (cdr (cdr a))))

(defun cadddr (a)
  "CAR of the CDR ^ 3"
  (car (cdr (cdr (cdr a)))))

(defun caddddr (a)
  "CAR of the CDR ^ 4"
  (car (cdr (cdr (cdr (cdr a))))))
